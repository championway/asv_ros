// Generated by gencpp from file asv_msgs/Boxlist.msg
// DO NOT EDIT!


#ifndef ASV_MSGS_MESSAGE_BOXLIST_H
#define ASV_MSGS_MESSAGE_BOXLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <asv_msgs/Box.h>
#include <sensor_msgs/CompressedImage.h>

namespace asv_msgs
{
template <class ContainerAllocator>
struct Boxlist_
{
  typedef Boxlist_<ContainerAllocator> Type;

  Boxlist_()
    : list()
    , image_width(0)
    , image_height(0)
    , image()  {
    }
  Boxlist_(const ContainerAllocator& _alloc)
    : list(_alloc)
    , image_width(0)
    , image_height(0)
    , image(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::asv_msgs::Box_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::asv_msgs::Box_<ContainerAllocator> >::other >  _list_type;
  _list_type list;

   typedef int32_t _image_width_type;
  _image_width_type image_width;

   typedef int32_t _image_height_type;
  _image_height_type image_height;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _image_type;
  _image_type image;





  typedef boost::shared_ptr< ::asv_msgs::Boxlist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asv_msgs::Boxlist_<ContainerAllocator> const> ConstPtr;

}; // struct Boxlist_

typedef ::asv_msgs::Boxlist_<std::allocator<void> > Boxlist;

typedef boost::shared_ptr< ::asv_msgs::Boxlist > BoxlistPtr;
typedef boost::shared_ptr< ::asv_msgs::Boxlist const> BoxlistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asv_msgs::Boxlist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asv_msgs::Boxlist_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'asv_msgs': ['/home/arg/asv_ros/catkin_ws/src/asv_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asv_msgs::Boxlist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asv_msgs::Boxlist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asv_msgs::Boxlist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asv_msgs::Boxlist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asv_msgs::Boxlist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asv_msgs::Boxlist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asv_msgs::Boxlist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64ed701dbabc3b78cf16142116cf4f2f";
  }

  static const char* value(const ::asv_msgs::Boxlist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64ed701dbabc3b78ULL;
  static const uint64_t static_value2 = 0xcf16142116cf4f2fULL;
};

template<class ContainerAllocator>
struct DataType< ::asv_msgs::Boxlist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asv_msgs/Boxlist";
  }

  static const char* value(const ::asv_msgs::Boxlist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asv_msgs::Boxlist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Box[] list\n"
"int32 image_width\n"
"int32 image_height\n"
"sensor_msgs/CompressedImage image\n"
"================================================================================\n"
"MSG: asv_msgs/Box\n"
"int32 x\n"
"int32 y\n"
"int32 w\n"
"int32 h\n"
"float32 confidence\n"
"int32 id\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::asv_msgs::Boxlist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asv_msgs::Boxlist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.list);
      stream.next(m.image_width);
      stream.next(m.image_height);
      stream.next(m.image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Boxlist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asv_msgs::Boxlist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asv_msgs::Boxlist_<ContainerAllocator>& v)
  {
    s << indent << "list[]" << std::endl;
    for (size_t i = 0; i < v.list.size(); ++i)
    {
      s << indent << "  list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::asv_msgs::Box_<ContainerAllocator> >::stream(s, indent + "    ", v.list[i]);
    }
    s << indent << "image_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASV_MSGS_MESSAGE_BOXLIST_H
